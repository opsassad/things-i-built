-- Migration: Add ratings table

CREATE TABLE public.ratings (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    -- Link to the post being rated. Ensures ratings are deleted if the post is.
    post_id text NOT NULL REFERENCES public.blog_posts(id) ON DELETE CASCADE,
    -- Rating value from 1 to 5
    rating integer NOT NULL CHECK (rating >= 1 AND rating <= 5),
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    -- Optional: Store a unique client identifier (e.g., browser fingerprint hash, session ID)
    -- This could be used for basic duplicate rating prevention, though not foolproof.
    client_identifier text
);

COMMENT ON TABLE public.ratings IS 'Stores user ratings (1-5) for blog posts and projects.';
COMMENT ON COLUMN public.ratings.post_id IS 'The ID of the blog_posts entry this rating belongs to.';
COMMENT ON COLUMN public.ratings.client_identifier IS 'An identifier for the client submitting the rating (optional, for simple duplicate prevention).';

-- Index for faster lookups/aggregation of ratings by post_id
CREATE INDEX idx_ratings_post_id ON public.ratings(post_id);

-- Enable Row Level Security
ALTER TABLE public.ratings ENABLE ROW LEVEL SECURITY;

-- Allow anyone to submit a rating (INSERT)
CREATE POLICY "Allow public inserts" ON public.ratings
    FOR INSERT TO public
    WITH CHECK (true);

-- Allow anyone to view all ratings (SELECT)
-- Needed to calculate average ratings on the frontend or backend.
CREATE POLICY "Allow public view" ON public.ratings
    FOR SELECT TO public
    USING (true);

-- Prevent public users from updating or deleting ratings
-- (No UPDATE or DELETE policies are defined for the 'public' role) 