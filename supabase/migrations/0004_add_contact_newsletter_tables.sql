-- Migration: Add newsletter_subscriptions and contact_submissions tables

-- ==== Newsletter Subscriptions Table ====

CREATE TABLE public.newsletter_subscriptions (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    email text NOT NULL UNIQUE CHECK (email ~* '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$'), -- Mandatory, unique, basic format check
    name text, -- Optional
    subscription_status text NOT NULL DEFAULT 'active', -- e.g., 'active', 'unsubscribed'
    ip_address text, -- Captured metadata
    country text,    -- Captured metadata
    region text,     -- Captured metadata (maps to regionName)
    city text,       -- Captured metadata
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL -- For status changes
);

COMMENT ON TABLE public.newsletter_subscriptions IS 'Stores email addresses and optional names for newsletter signups.';
COMMENT ON COLUMN public.newsletter_subscriptions.email IS 'Subscriber email address.';
COMMENT ON COLUMN public.newsletter_subscriptions.name IS 'Optional subscriber name.';
COMMENT ON COLUMN public.newsletter_subscriptions.subscription_status IS 'Current status (e.g., active, unsubscribed).';
COMMENT ON COLUMN public.newsletter_subscriptions.ip_address IS 'IP address recorded at signup.';
COMMENT ON COLUMN public.newsletter_subscriptions.country IS 'Country recorded at signup.';
COMMENT ON COLUMN public.newsletter_subscriptions.region IS 'Region/State recorded at signup.';
COMMENT ON COLUMN public.newsletter_subscriptions.city IS 'City recorded at signup.';

-- Function to automatically update 'updated_at' timestamp (if not already created)
-- Ensure this function exists or create it separately if needed.
-- CREATE OR REPLACE FUNCTION public.handle_updated_at() ...

-- Trigger to update 'updated_at' on newsletter_subscriptions modification
CREATE TRIGGER on_newsletter_subscription_update
  BEFORE UPDATE ON public.newsletter_subscriptions
  FOR EACH ROW
  EXECUTE PROCEDURE public.handle_updated_at();

-- Index for faster email lookups
CREATE INDEX idx_newsletter_subscriptions_email ON public.newsletter_subscriptions(email);

-- ==== Contact Form Submissions Table ====

CREATE TABLE public.contact_submissions (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name text NOT NULL, -- Sender's name from form
    email text NOT NULL CHECK (email ~* '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$'), -- Sender's email, basic format check
    message text NOT NULL, -- Message content from form
    ip_address text, -- Captured metadata
    country text,    -- Captured metadata
    region text,     -- Captured metadata (maps to regionName)
    city text,       -- Captured metadata
    created_at timestamp with time zone DEFAULT now() NOT NULL
);

COMMENT ON TABLE public.contact_submissions IS 'Stores submissions from the contact form.';
COMMENT ON COLUMN public.contact_submissions.name IS 'Name provided in the contact form.';
COMMENT ON COLUMN public.contact_submissions.email IS 'Email address provided in the contact form.';
COMMENT ON COLUMN public.contact_submissions.message IS 'Message content from the contact form.';
COMMENT ON COLUMN public.contact_submissions.ip_address IS 'IP address recorded at submission.';
COMMENT ON COLUMN public.contact_submissions.country IS 'Country recorded at submission.';
COMMENT ON COLUMN public.contact_submissions.region IS 'Region/State recorded at submission.';
COMMENT ON COLUMN public.contact_submissions.city IS 'City recorded at submission.';

-- Optional: Index for searching by email or date
-- CREATE INDEX idx_contact_submissions_email ON public.contact_submissions(email);
-- CREATE INDEX idx_contact_submissions_created_at ON public.contact_submissions(created_at);


-- ==== Row Level Security (RLS) Policies ====

-- Enable RLS for the new tables
ALTER TABLE public.newsletter_subscriptions ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.contact_submissions ENABLE ROW LEVEL SECURITY;

-- Allow public insert access for newsletter subscriptions (for signup form)
DROP POLICY IF EXISTS "Allow public insert" ON public.newsletter_subscriptions;
CREATE POLICY "Allow public insert" ON public.newsletter_subscriptions
  FOR INSERT
  TO public -- Allows anyone, including anonymous users
  WITH CHECK (true); -- No specific check required for insertion itself

-- Allow public insert access for contact submissions (for contact form)
DROP POLICY IF EXISTS "Allow public insert" ON public.contact_submissions;
CREATE POLICY "Allow public insert" ON public.contact_submissions
  FOR INSERT
  TO public -- Allows anyone, including anonymous users
  WITH CHECK (true); -- No specific check required for insertion itself

-- NOTE: SELECT, UPDATE, DELETE policies are intentionally omitted for the 'public' role.
-- Access for reading or managing these records should be granted to specific authenticated roles (e.g., 'authenticated', 'service_role', or custom admin roles).
-- Example (Admin read access - DO NOT APPLY unless intended):
-- CREATE POLICY "Allow admin read access" ON public.newsletter_subscriptions FOR SELECT TO service_role USING (true);
-- CREATE POLICY "Allow admin read access" ON public.contact_submissions FOR SELECT TO service_role USING (true); 