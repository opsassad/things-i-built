-- Migration: Add comments table

CREATE TABLE public.comments (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    -- Link to the post being commented on. Ensures comments are deleted if the post is.
    post_id text NOT NULL REFERENCES public.blog_posts(id) ON DELETE CASCADE,
    name text NOT NULL CHECK (char_length(name) > 0),
    email text NOT NULL CHECK (email ~* '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$'),
    content text NOT NULL CHECK (char_length(content) > 0),
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    -- Comments require approval before being publicly visible
    approved boolean DEFAULT false NOT NULL
);

COMMENT ON TABLE public.comments IS 'Stores user comments on blog posts and projects.';
COMMENT ON COLUMN public.comments.post_id IS 'The ID of the blog_posts entry this comment belongs to.';
COMMENT ON COLUMN public.comments.approved IS 'Whether the comment has been approved by an admin and is publicly visible.';

-- Index for faster lookups of comments by post_id
CREATE INDEX idx_comments_post_id ON public.comments(post_id);

-- Enable Row Level Security
ALTER TABLE public.comments ENABLE ROW LEVEL SECURITY;

-- Allow anyone to submit a comment (INSERT)
-- We don't check for 'approved' here because comments start as unapproved.
CREATE POLICY "Allow public inserts" ON public.comments
    FOR INSERT TO public
    WITH CHECK (true);

-- Allow anyone to view comments that have been approved (SELECT)
CREATE POLICY "Allow public view of approved comments" ON public.comments
    FOR SELECT TO public
    USING (approved = true);

-- Prevent public users from updating or deleting comments
-- (No UPDATE or DELETE policies are defined for the 'public' role) 